#!/usr/bin/env bash
# Usage: sub new [flags] command
# Summary: Generate a new command
# Help: Make a new script that can be run with `sub command`

set -e

local=
sh=

if [ "$1" = "--complete" ]; then
  echo "--local"
  echo "--sh"
  exit
fi

while [ $# -gt 0 ]; do
  case "$1" in
    -l|--local) local=1 ;;
    --sh) sh=1 ;;
    (--) shift; break ;;
    (*) break ;;
  esac
  shift
done

if [ -z "$1" ]; then
  echo "Please provide a command name to generate" >&2
  exit 1
fi

command="${1}"
basename="sub-${command}"
dir=

if [ -n "$local" ]; then
  dir="$PWD/.sub"
else
  dir="$_SUB_ROOT"
fi

filepath="${dir}/libexec/${basename}"

if [ -x "$filepath" ]; then
  echo "That command already exists" >&2
  exit 1
fi

mkdir -p "${dir}/libexec"

cat > "$filepath" <<-TEMPLATE
	#!/usr/bin/env bash
	# Usage: sub $command
	# Summary: (please add docs here)
	# Help: (add longer optional help here, that
	# can be multi-line and include examples)

	echo "It was generated"
TEMPLATE

chmod +x $filepath

if [ -n "$sh" ]; then
  sh_filepath="${dir}/libexec/sub-sh-${command}"
  cat > "$sh_filepath" <<-TEMPLATE
	#!/usr/bin/env bash
	# Call main command
	output="\$(sub-$command)"
	echo "OUTPUT FROM MAIN COMMAND: \$output" >&2
	echo "Any output to stdout gets evaled by the shell" >&2
	echo "So use stderr redirection to print" >&2

	echo "pwd"
TEMPLATE

  chmod +x $sh_filepath
fi

echo "Generated $filepath"
