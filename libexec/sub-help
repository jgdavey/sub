#!/usr/bin/env bash
set -e

print_summaries() {
  local commands=()
  local summaries=()
  local longest_command=0
  local command

  for command in $(sub-commands); do
    local file="$(command_path "$command")"
    local indicate_local="$(local_indicator "$file")"
    if [[ ! -h "$file" ]]; then
      local summary="$(summary "$file")"
      if [[ -n "$summary" ]]; then
        commands["${#commands[@]}"]="$command"
        summaries["${#summaries[@]}"]="${indicate_local}${summary}"

        if [[ "${#command}" -gt "$longest_command" ]]; then
          longest_command="${#command}"
        fi
      fi
    fi
  done

  local index
  local columns="$(tput cols)"
  local summary_length=$(( $columns - $longest_command - 5 ))

  for (( index=0; index < ${#commands[@]}; index++ )); do
    printf "   %-${longest_command}s  %s\n" "${commands[$index]}" \
      "$(truncate "$summary_length" "${summaries[$index]}")"
  done
}

print_help() {
  local command="$1"
  local file="$2"
  local usage="$(usage "$file")"

  if [[ -n "$usage" ]]; then
    echo "$usage"

    local summary="$(summary "$file")"
    [[ -n "$summary" ]] && echo "Summary: $summary"

    local help="$(help "$file")"
    [[ -n "$help" ]] && echo && echo "$help"

    local extended_help=
    if grep -q "\--help" "$file" >/dev/null; then
      extended_help="$(jd-$command --help 2>&1)"
      if [[ $? = 0 ]]; then
        echo && echo "$extended_help"
      fi
    fi
  else
    echo "Sorry, this command isn't documented yet."
  fi
}

command_path() {
  command -v "sub-$command" || command -v "sub-sh-$command" || true
}

local_indicator() {
  if [[ "$_LOCAL_SUB_ROOT" = "${1%/*}" ]]; then
    echo "(local) "
  fi
}

summary() {
  sed -n "s/^[#;];* Summary: \(.*\)/\1/p" "$1" | head -n1
}

usage() {
  sed -n "s/^[#;];* \(Usage: .*\)/\1/p" "$1" | sed "s/\$0/sub/g"
}

help() {
  awk '/^[^#;]/{p=0} /^[#;];* Help:/{p=1} p' "$1" | sed "s/^[#;];* Help: //;s/^[#;];* //;s/^[#;];*//"
}

truncate() {
  local max_length="$1"
  local string="$2"

  if [[ "${#string}" -gt "$max_length" ]]; then
    local length=$(( $max_length - 3 ))
    echo "${string:0:$length}..."
  else
    echo "$string"
  fi
}

# Provide sub completions, only for documented commands
if [[ "$1" = "--complete" ]]; then
  for command in $(sub-commands); do
    file="$(command_path "$command")"
    if [[ -n "$file" ]]; then
      if [[ -n "$(usage $file)" ]]; then
        echo "$command"
      fi
    fi
  done
  exit
fi

command="$1"
case "$command" in
"") echo "Usage: sub <command> [<args>]

Some useful sub commands are:
$(print_summaries)

See 'sub help <command>' for information on a specific command."
;;
*)
  file="$(command_path "$command")"

  if [[ -n "$file" ]]; then
    print_help "$command" "$file"
  else
    echo "sub: no such command \`$command'" >&2
    exit 1
  fi
esac
